{"version":3,"sources":["TodoCreateForm.js","TodoListItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoCreateForm","props","useState","inputValue","setInputValue","value","onChange","e","target","className","onClick","create","trash","width","height","viewBox","fill","xmlns","d","fillRule","pencil","up","down","fill-rule","TodoListItem","id","title","done","toggleDone","onDelete","edit","move","titleStyle","textDecoration","listStyleType","isEditMode","setIsEditMode","updateTodo","setUpdateTodo","style","TodoList","list","todoUpdate","map","el","key","initialList","App","setList","console","log","newItem","Math","random","updatedList","todoId","newList","filter","newTodo","direction","firstIndex","findIndex","secondIndex","length","warn","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ceaca134.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction TodoCreateForm(props) {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const onCreate = () => {\n        props.create(inputValue);\n        setInputValue('');\n    };\n\n    return (\n        <div >\n\n            <input value={inputValue} onChange={e => setInputValue(e.target.value)}/>\n            <button className=\"btn btn-outline-success ml-3\" onClick={onCreate}>create</button>\n\n        </div>\n    );\n}\n\nexport default TodoCreateForm;\n","import React, {useState} from 'react';\n\nconst trash = (<svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n</svg>)\n\n\nconst pencil = (<svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                     xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n</svg>)\n\nconst up = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-up\" fill=\"currentColor\"\n                 xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M8 3.5a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M7.646 2.646a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8 3.707 5.354 6.354a.5.5 0 1 1-.708-.708l3-3z\"/>\n</svg>)\n\nconst down = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-down\" fill=\"currentColor\"\n                   xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\"\n          d=\"M4.646 9.646a.5.5 0 0 1 .708 0L8 12.293l2.646-2.647a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 0-.708z\"/>\n    <path fill-rule=\"evenodd\" d=\"M8 2.5a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-1 0V3a.5.5 0 0 1 .5-.5z\"/>\n</svg>)\n\nfunction TodoListItem(props) {\n\n\n    const {id, title, done, toggleDone, onDelete, edit, move} = props;\n\n    const titleStyle = done ? {textDecoration: \"line-through\", listStyleType: \"none\"} : {listStyleType: \"none\"};\n\n    const [isEditMode, setIsEditMode] = useState(false);\n    const [updateTodo, setUpdateTodo] = useState(title);\n\n    const inputHandler = (e) => {\n        setUpdateTodo(e.target.value)\n    };\n\n    const saveButtonHandler = () => {\n        edit(id, updateTodo);\n        setIsEditMode(false);\n    };\n\n    // if(isEditMode) {\n    //     return (<div>\n    //         <input value={newTodo} onChange={inputHandler}/>\n    //         <button className=\"btn btn-outline-success ml-2 mt-2\" onClick={saveButtonHandler}>Save</button>\n    //     </div>\n    //     );\n    // } else {\n    //     return (<div>\n    //                <span className=\"title\" style={titleStyle}>\n    //                  {todoTitle}\n    //                </span>\n    //             <button className=\"btn btn-outline-success ml-2 mt-2\" onClick={() => toggleDone(todoId)}>\n    //                 {isTodoDone ? 'Undone' : 'Done'}\n    //             </button>\n    //             <button className=\"btn btn-outline-warning ml-3 mt-2\"\n    //                     onClick={() => setIsEditMode(true)}>{pencil}</button>\n    //             <button className=\"btn btn-outline-danger ml-2 mt-2\" onClick={() => onDelete(todoId)}>{trash}</button>\n    //         </div>\n    //     );\n    // }\n    // }\n\n    return (\n        <div className=\"form-group\">\n            {isEditMode ? (\n                <div>\n                    <input value={updateTodo} onChange={inputHandler}/>\n                    <button className=\"btn btn-outline-success ml-2 mt-2\" onClick={saveButtonHandler}>Save</button>\n                </div>\n            ) : (\n                <div>\n                   <span className=\"title\" style={titleStyle}>\n                     {title}\n                   </span>\n                    <button className=\"btn btn-outline-success ml-2 mt-2\" onClick={() => toggleDone(id)}>\n                        {done ? 'Undone' : 'Done'}\n                    </button>\n                    <button className=\"btn btn-outline-warning ml-3 mt-2\" onClick={() => setIsEditMode(true)}>{pencil}</button>\n                    <button className=\"btn btn-outline-danger ml-2 mt-2\" onClick={() => onDelete(id)}>{trash}</button>\n                    <button className=\"btn btn-outline-success ml-3 mt-2\" onClick={() => move (id, -1)}>{up}</button>\n                    <button className=\"btn btn-outline-success mt-2\" onClick={() => move (id, 1)}>{down}</button>\n                </div>\n            )}\n\n        </div>\n\n    );\n}\n\nexport default TodoListItem;\n","import React from 'react';\nimport TodoListItem from \"./TodoListItem\";\n\n\nfunction TodoList(props) {\n\n    const {list, onDelete, todoUpdate, toggleDone, edit, move} = props;\n\n    return (\n        <div className=\"form-group\">\n            {list.map(el => <TodoListItem id={el.id}\n                                          title={el.title}\n                                          done={el.done}\n                                          key={el.id}\n                                          toggleDone={toggleDone}\n                                          onDelete={onDelete}\n                                          edit={edit}\n                                          move={move}/>)}\n\n        </div>\n    );\n}\n\nexport default TodoList;\n","import React, {useState} from 'react';\nimport './App.css';\nimport TodoCreateForm from \"./TodoCreateForm\";\nimport TodoList from \"./TodoList\";\n\n\nconst initialList = [\n    {id: 1, title: 'first Todo', done: false},\n    {id: 2, title: 'second Todo', done: false},\n    {id: 3, title: 'third Todo', done: false},\n];\n\nfunction App() {\n\n    const [list, setList] = useState(initialList);\n\n    const create = (title) => {\n        console.log(title);\n        const newItem = {id: Math.random(), title: title, done: false}\n        const updatedList = [...list, newItem];\n        setList(updatedList);\n    };\n\n    const toggleDone = (todoId) => {\n        const newList = list.map(el => {\n                    if (el.id === todoId) return {...el, done: !el.done}\n                    return el;\n                })\n                setList(newList);\n    }\n    const onDelete = (todoId) => {\n        const newList = [...list].filter(el => el.id !== todoId);\n        setList(newList);\n    };\n\n    const edit = (todoId, newTodo) => {\n        const updatedList = list.map(el => {\n            if (el.id === todoId) return {...el, title: newTodo}\n            return el;\n        })\n        setList(updatedList);\n    };\n\n    const move = (todoId, direction) => {\n        const firstIndex = list.findIndex(el => el.id === todoId);\n        const secondIndex = firstIndex + direction;\n         if(secondIndex < 0 || secondIndex > list.length -1) {\n             console.warn(\"CAN'T MOVE! INDEX UOT OF RANGE\");\n         } else {\n           const newList = [...list]\n           const temp = newList[firstIndex];              //ниже за коммент строчка - это реструктуризация этих трех строк\n           newList[firstIndex] = newList[secondIndex];   //ниже за коммент строчка - это реструктуризация этих трех строк\n           newList[secondIndex] = temp;                 //ниже за коммент строчка - это реструктуризация этих трех строк\n           // [newList[firstIndex], newList[secondIndex]] = [newList[secondIndex], newList[firstIndex]];\n           setList(newList);\n         }\n    };\n\n    return (\n\n        <div className=\"App\">\n            <h3>To Do List </h3>\n\n            <TodoCreateForm create={create}/>\n\n            <TodoList list={list}\n                      toggleDone={toggleDone}\n                      onDelete={onDelete}\n                      edit={edit}\n                      move={move}/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}