{"version":3,"sources":["TodoCreateForm.js","TodoListItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoCreateForm","props","useState","inputValue","setInputValue","value","onChange","e","target","className","onClick","create","trash","width","height","viewBox","fill","xmlns","d","fillRule","pencil","check","uncheck","TodoListItem","todo","markAsDone","unMark","remove","todoUpdate","isTodoDone","done","todoTitle","title","todoId","id","titleStyle","textDecoration","listStyleType","isEditMode","setIsEditMode","newTodo","setNewTodo","style","TodoList","list","map","el","key","initialList","App","setList","console","log","newItem","Math","random","updatedList","newList","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d25970da.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction TodoCreateForm(props) {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const onCreate = () => {\n        props.create(inputValue);\n        setInputValue('');\n    };\n\n    return (\n        <div >\n\n            <input value={inputValue} onChange={e => setInputValue(e.target.value)}/>\n            <button className=\"btn btn-outline-success ml-3\" onClick={onCreate}>create</button>\n\n        </div>\n    );\n}\n\nexport default TodoCreateForm;\n","import React, {useState} from 'react';\n\nconst trash = (<svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n</svg>)\n\n\nconst pencil = (<svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                     xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n</svg>)\n\nconst check = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-check-square\" fill=\"currentColor\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z\"/>\n</svg>)\n\nconst uncheck = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-square\" fill=\"currentColor\"\n                      xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n</svg>)\n\nfunction TodoListItem(props) {\n\n\n    const {todo, markAsDone, unMark, remove, todoUpdate} = props;\n\n    const isTodoDone = todo.done;\n    const todoTitle = todo.title; // можем мы это написать props.todo.title\n    const todoId = todo.id\n    const titleStyle = isTodoDone === true ? {\n        textDecoration: \"line-through\",\n        listStyleType: \"none\"\n    } : {listStyleType: \"none\"};\n\n    const [isEditMode, setIsEditMode] = useState(false);\n    const [newTodo, setNewTodo] = useState(todoTitle);\n\n    const inputHandler = (e) => {\n        setNewTodo(e.target.value)\n    };\n\n    const saveButtonHandler = () => {\n        todoUpdate(todoId, newTodo);\n        setIsEditMode(false);\n    };\n\n    return (\n        <div className=\"form-group\">\n            {isEditMode ? (\n                    <div>\n                        <input value={newTodo} onChange={inputHandler}/>\n                        <button className=\"btn btn-outline-success ml-2 mt-2\" onClick={saveButtonHandler}>Save</button>\n                    </div>\n                )\n\n                :\n\n                (\n                    <div className=\"form-group\">\n                        {isTodoDone\n                            ?\n                            (\n                                <li className=\"form-group\" style={titleStyle} >\n                                    {todoTitle}\n                                    <button className=\"btn btn-outline-success ml-2 mt-2\" onClick={() => unMark(todoId)}>{check}</button>\n\n                                    <button className=\"btn btn-outline-warning ml-3 mt-2\" onClick={() => setIsEditMode(true)}>{pencil}</button>\n                                    <button className=\"btn btn-outline-danger ml-2 mt-2\" onClick={() => remove(todoId)}>{trash}</button>\n                                </li>\n                            )\n                            :\n                            (<li className=\"form-group\" style={titleStyle}>\n                                {todoTitle}\n                                <button className=\"btn btn-outline-success ml-2 mt-2\" onClick={() => markAsDone(todoId)}>{uncheck}</button>\n\n                                <button className=\"btn btn-outline-warning ml-2 mt-2\" onClick={() => setIsEditMode(true)}>{pencil}</button>\n                                <button className=\"btn btn-outline-danger ml-2 mt-2\" onClick={() => remove(todoId)}>{trash}</button>\n                            </li>)\n                        }\n                    </div>\n                )}\n\n\n        </div>\n\n    );\n}\n\nexport default TodoListItem;\n","import React from 'react';\nimport TodoListItem from \"./TodoListItem\";\n\n\nfunction TodoList(props) {\n\n    const {list, markAsDone, unMark, remove, todoUpdate} = props;\n\n    return (\n        <div className=\"form-group\">\n            {list.map(el => <TodoListItem todo={el}\n                                          key={el.id}\n                                          markAsDone={markAsDone}\n                                          unMark={unMark}\n                                          remove={remove}\n                                          todoUpdate={todoUpdate}/>)}\n\n        </div>\n    );\n}\n\nexport default TodoList;\n","import React, {useState} from 'react';\nimport './App.css';\nimport TodoCreateForm from \"./TodoCreateForm\";\nimport TodoList from \"./TodoList\";\n\n\nconst initialList = [\n    {id: 1, title: 'first Todo', done: false},\n    {id: 2, title: 'second Todo', done: false},\n    {id: 3, title: 'third Todo', done: false},\n];\n\nfunction App() {\n\n    const [list, setList] = useState(initialList);\n\n    const create = (title) => {\n        console.log(title);\n        const newItem = {id: Math.random(), title: title, done: false}\n        const updatedList = [...list, newItem];\n        setList(updatedList);\n    };\n\n    const markAsDone = (todoId) => {\n        const newList = [...list].map(el => {\n            if (el.id === todoId) return {...el, done: true}\n            return el;\n        })\n        setList(newList);\n    };\n\n    const unMark = (todoId) => {\n        const newList = [...list].map(el => {\n            if (el.id === todoId) return {...el, done: false}\n            return el;\n        })\n        setList(newList);\n    };\n\n    const remove = (todoId) => {\n        const newList = [...list].filter(el => el.id !== todoId);\n        setList(newList);\n    };\n\n    const todoUpdate = (todoId, newTodo) => {\n        const updatedList = [...list].map(el => {\n            if (el.id === todoId) return {...el, title: newTodo}\n            return el;\n        })\n        setList(updatedList);\n    };\n\n\n    return (\n\n        <div className=\"App\">\n            <h3>To Do List </h3>\n\n            <TodoCreateForm create={create}/>\n\n            <TodoList list={list}\n                      markAsDone={markAsDone}\n                      unMark={unMark}\n                      remove={remove}\n                      todoUpdate={todoUpdate}/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}